[
  {
    "objectID": "HW06.html",
    "href": "HW06.html",
    "title": "HW06",
    "section": "",
    "text": "Task 1: Conceptual Questions\n1. What is the purpose of the lapply() function? What is the equivalent purrr function? \nAns: lapply():- Applies a function to elements in a list or a vector and returns the results in a list.The syntax of lapply is lapply(x, FUN,…) where x is a vector, FUN: the function to be applied to each element of x. purrr function:– purrr::map()– it is more consistency and some helper functions are there, it offers more control over output types and integrates well with the tidyverse.\n2. Suppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\nlist1 &lt;- c(45,57,27,89,25,44)\nlist2 &lt;- c(34,23,567,45,67,26)\n\nmy_list&lt;- list(data.frame(list1,list2))\n\ncor_results &lt;- lapply(my_list, function(numeric_matrix) {\n  cor(numeric_matrix, method = \"kendall\")\n})\n\n# Display the correlation results\ncor_results\n\n[[1]]\n           list1      list2\nlist1  1.0000000 -0.3333333\nlist2 -0.3333333  1.0000000\n\n\n3. What are two advantages of using purrr functions instead of the BaseR apply family? ans: There are two primary differences between the base apply family and the purrr map family: purrr functions are named more consistently, and more fully explore the space of input and output variants.\n\n\npurrr functions consistently use . as prefix to avoid inadvertently matching arguments of the purrr function, instead of the function that you’re trying to call. Base functions use a variety of techniques including upper case (e.g. lapply(X, FUN, …)) or require anonymous functions (e.g. Map()).\n\nAll map functions are type stable: you can predict the type of the output using little information about the inputs. In contrast, the base functions sapply() and mapply() automatically simplify making the return value hard to predict.\n\nThe map functions all start with the data, followed by the function, then any additional constant argument. Most base apply functions also follow this pattern, but mapply() starts with the function, and Map() has no way to supply additional constant arguments.\n\npurrr functions provide all combinations of input and output variants, and include variants specifically for the common two argument case.\n4. What is a side-effect function?\nAns: Side effect is a function that perfrorm an action beyond simply returning a value.Here are some key points : 1) Changing state:-  Side-effect functions can modify global variables, change the contents of data frames, write to files, or alter the state of objects in the environment. For example, using assign() to create or modify a variable in a different environment is a side effect.\n\nOutput Generation: Functions that produce visual output (like plots or graphs) or print messages to the console are also considered side-effect functions. For instance, print(), plot(), and cat() functions display output rather than returning a value for further computation. Walk() :- this is a side- effect function but return the original data. It is used to apply a function to each element of a list or vector without returning a result. It’s typically used for functions that produce side effects, such as printing or writing to files\n\nOther Side-Effect Functions in Base R In addition to purrr, many base R functions also have side effects, including:\nprint(): Outputs the value to the console. cat(): Concatenates and prints objects. plot(): Generates visual output. write.csv(): Writes data frames to a CSV file. assign(): Assigns a value to a variable in a specified environment. message(): Sends a message to the console, useful for debugging.\n5. Why can you name a variable sd in a function and not cause any issues with the sd function?\nAns: We can name a variable sd within function without causing issues with the built in sd() function because of scope and masking rule. 1. Function scope:-  when we define a variable inside a function, it exists in that function’s local environment only. 2. Masking:- If a variable name in a local environment matches a function name like sd the local variable will mask the function witin that environment. It means outside the function, the global sd() function remains unchanged and accessible.\nTask 2: Task 2 - Writing R Functions\n\nWrite a basic function (call it getRMSE()) that takes in a vector of responses and a vector of predictions and outputs the RMSE. • If a value is missing for the vector of responses (i.e. an NA is present), allow for additional arguments to the mean() function (elipses) that removes the NA values in the computation.\n\n\ngetRMSE &lt;- function(responses, predictions, na.rm = TRUE) {\n \n  # Calculate the RMSE\n  cal_rmse &lt;- sqrt(mean((responses - predictions)^2, na.rm = na.rm))\n  \n  return(cal_rmse)\n}\n\n# Example usage\nresponses &lt;- c(3, 9, NA, 7, NA, 34, 67)\npredictions &lt;- c(2, 5, 8, 23, 51, 21, 34)\n\nrmse_result &lt;- getRMSE(responses, predictions)\nprint(rmse_result)\n\n[1] 17.49857\n\n\n\nRun the following code to create some response values and predictions.\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n• Test your RMSE function using this data.\n\nrmse_result1 &lt;- getRMSE(resp, pred)\nprint(paste0(\"Without NA \\n \", rmse_result1))\n\n[1] \"Without NA \\n 0.958167655151933\"\n\n\n• Repeat after replacing two of the response values with missing values (NA_real_). – Test your RMSE function with and without specifying the behavior to deal with missing values.\n\n# Change the first two response values with NA_real_\nresp[c(1, 2)] &lt;- NA_real_\n\n\n#Compute RMSE, removing NA values if present\nrmse_without_na &lt;- getRMSE(resp, pred)\nprint(paste(\"RMSE without NA handling (na.rm = TRUE):\", rmse_without_na))\n\n[1] \"RMSE without NA handling (na.rm = TRUE): 0.966169936538663\"\n\n\n\n# Test RMSE with explicit handling of NA\nrmse_with_na &lt;- getRMSE(resp, pred, na.rm = FALSE)\nprint(paste(\"RMSE with NA  (na.rm = FALSE):\", rmse_with_na))\n\n[1] \"RMSE with NA  (na.rm = FALSE): NA\"\n\n\n\nAnother common metric for evaluating predictions is mean absolute deviation. Write a function called getMAE() that follows the specifications of the getRMSE() function. getMAE use for handling the missing values\n\n\ngetMAE &lt;- function(responses, predictions, na.rm = TRUE){\n  # Calculate MAE\n  abs_value &lt;- abs(responses - predictions)\n  mae_cal &lt;- mean(abs_value, na.rm = na.rm)\n  return(mae_cal)\n}\n\n\n# Example\nresponses &lt;- c(3, 9, NA, 7, 6, 34, 67)\npredictions &lt;- c(2, 5, 8, 23, 51, 21, 34)\n\nmae_result &lt;- getMAE(responses, predictions)\nprint(paste(\"Mean Absolute Value is\", mae_result))\n\n[1] \"Mean Absolute Value is 18.6666666666667\"\n\n\n\nRun the following code to create some response values and predictions.\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n• Test MAE function by using given data.\n\nmae_result1 &lt;- getMAE(resp, pred)\nprint(paste(\"The MAE value without NA \", mae_result1))\n\n[1] \"The MAE value without NA  0.815577593682669\"\n\n\n• Repeat after replacing two of the response values with missing values (NA_real_). – Test your MAE function with and without specifying the behavior to deal with missing values.\n\n# Change 2 values with the missing values NA_real_\nresp[c(1,4)] &lt;- NA_real_\n\n\n# Without NA value\nmae_without_NA &lt;- getMAE(resp,pred)\nprint(paste(\"Result of MAE Without NA values \", mae_without_NA))\n\n[1] \"Result of MAE Without NA values  0.807148944242633\"\n\n\n\n# with NA values\nmae_with_na &lt;- getMAE(resp, pred, na.rm = FALSE)\nprint(paste(\"MAE value with na \", mae_with_na))\n\n[1] \"MAE value with na  NA\"\n\n#print(mae_with_na)\n\n\nLet’s create a wrapper function that can be used to get either or both metrics returned with a single function call. Do not rewrite your above two functions, call them inside the wrapper function (we would call the getRMSE() and getMAE() functions helper functions). When returning your values, give them appropriate names.\n\n\nThe function should check that two numeric (atomic) vectors have been passed (consider is.vector(), is.atomic(), and is.numeric()). If not, a message should print and the function should exit. • The function should return both metrics by default and include names. The behavior should be able to be changed using a character string of metrics to find.\n\n\n# helper functions getRMSE() and getMAE() :\ngetRMSE &lt;- function(responses, predictions, na.rm = TRUE) {\n  sqrt(mean((responses - predictions)^2, na.rm = na.rm))\n}\n\ngetMAE &lt;- function(responses, predictions, na.rm = TRUE) {\n  mean(abs(responses - predictions), na.rm = na.rm)\n}\n\n# Wrapper function\ngetMetrics &lt;- function(responses, predictions, metric = \"both\", na.rm = TRUE) {\n  \n  # Check if response and prediction inputs are numeric atomic vectors\n  if (!(is.numeric(responses) && is.atomic(responses) && is.vector(responses))) {\n    stop(\"Error: 'responses' must be a numeric atomic vector.\")\n  }\n  \n  if (!(is.numeric(predictions) && is.atomic(predictions) && is.vector(predictions))) {\n    stop(\"Error: 'predictions' must be a numeric atomic vector.\")\n  }\n  \n  # Initialize an empty list \n  result &lt;- list()\n\n  # Compute the required metric based on the argument\n  if (metric == \"RMSE\" || metric == \"both\") {\n    result$RMSE &lt;- getRMSE(responses, predictions, na.rm = na.rm)\n  }\n  \n  if (metric == \"MAE\" || metric == \"both\") {\n    result$MAE &lt;- getMAE(responses, predictions, na.rm = na.rm)\n  }\n  \n  # If there is only single metric\n  if (metric != \"both\" && length(result) == 1) {\n    result &lt;- unlist(result)\n  }\n  \n  return(result)\n}\n\n# Input \nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n# Test wrapper for both RMSE and MAE\nboth_metrics &lt;- getMetrics(resp, pred)\nprint(both_metrics)\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n# Test wrapper for RMSE\nrmse_only &lt;- getMetrics(resp, pred, metric = \"RMSE\")\nprint(rmse_only)\n\n     RMSE \n0.9581677 \n\n# Test wrapper for MAE\nmae_only &lt;- getMetrics(resp, pred, metric = \"MAE\")\nprint(mae_only)\n\n      MAE \n0.8155776 \n\n# Test with invalid input (non-numeric vector)\n# invalid_input &lt;- getMetrics(c(\"a\", \"b\", \"c\"), pred)\n\n\nRun the following code to create some response values and predictions:\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\n# Define RMSE Wrapper function\nrmseWrapper &lt;- function(actual, predicted, na.rm = TRUE) {\n  if (!is.numeric(actual) || !is.numeric(predicted)) {\n    stop(\"Both 'actual' and 'predicted' should be numeric vectors.\")\n  }\n  \n  if (na.rm) {\n    valid &lt;- !is.na(actual) & !is.na(predicted)\n    actual &lt;- actual[valid]\n    predicted &lt;- predicted[valid]\n  }\n  \n  sqrt(mean((actual - predicted)^2, na.rm = na.rm))\n}\n\n# Define MAE Wrapper function\nmaeWrapper &lt;- function(actual, predicted, na.rm = TRUE) {\n  if (!is.numeric(actual) || !is.numeric(predicted)) {\n    stop(\"Both 'actual' and 'predicted' should be numeric vectors.\")\n  }\n  \n  if (na.rm) {\n    valid &lt;- !is.na(actual) & !is.na(predicted)\n    actual &lt;- actual[valid]\n    predicted &lt;- predicted[valid]\n  }\n  \n  mean(abs(actual - predicted), na.rm = na.rm)\n}\n\n• Test your new function using this data. Call it once asking for each metric individually and once specifying both metrics • Repeat with replacing two of the response values with missing values (NA_real_). • Finally, test your function by passing it incorrect data (i.e. a data frame or something else instead of vectors.\n\n# run the wrapper function\nrmse_value &lt;- rmseWrapper(resp, pred)\nprint(paste(\"RMSE:\", rmse_value))\n\n[1] \"RMSE: 0.958167655151933\"\n\n\nTest the MAE wrapper function:\n\nmae_value &lt;- maeWrapper(resp, pred)\nprint(paste(\"MAE:\", mae_value))\n\n[1] \"MAE: 0.815577593682669\"\n\n\nTest both functions individually:\n\n# Test RMSE\nrmse_result &lt;- rmseWrapper(resp, pred)\nprint(paste(\"Individual RMSE:\", rmse_result))\n\n[1] \"Individual RMSE: 0.958167655151933\"\n\n# Test MAE\nmae_result &lt;- maeWrapper(resp, pred)\nprint(paste(\"Individual MAE:\", mae_result))\n\n[1] \"Individual MAE: 0.815577593682669\"\n\n\nStep 3: Handle missing values\n\n# missing values into the response data\nresp[1] &lt;- NA_real_\nresp[2] &lt;- NA_real_\n\n# RMSE with missing values\nrmse_with_na &lt;- rmseWrapper(resp, pred, na.rm = TRUE)\nprint(paste(\"RMSE with NA \", rmse_with_na))\n\n[1] \"RMSE with NA  0.966169936538663\"\n\n# MAE with missing values\nmae_with_na &lt;- maeWrapper(resp, pred, na.rm = TRUE)\nprint(paste(\"MAE with NA \", mae_with_na))\n\n[1] \"MAE with NA  0.824120056659464\"\n\n# missing values without na.rm\nrmse_with_na_false &lt;- rmseWrapper(resp, pred, na.rm = FALSE)\nprint(paste(\"RMSE with NA (na.rm = FALSE):\", rmse_with_na_false))\n\n[1] \"RMSE with NA (na.rm = FALSE): NA\"\n\nmae_with_na_false &lt;- maeWrapper(resp, pred, na.rm = FALSE)\nprint(paste(\"MAE with NA (na.rm = FALSE):\", mae_with_na_false))\n\n[1] \"MAE with NA (na.rm = FALSE): NA\"\n\n\nStep 4: Test with incorrect data types\n\n# Check the incorrect input (data frame)\nincorrect_data &lt;- data.frame(resp, pred)\n\n# Expecting error messages here\ntry(rmseWrapper(incorrect_data, pred))\n\nError in rmseWrapper(incorrect_data, pred) : \n  Both 'actual' and 'predicted' should be numeric vectors.\n\ntry(maeWrapper(resp, incorrect_data))\n\nError in maeWrapper(resp, incorrect_data) : \n  Both 'actual' and 'predicted' should be numeric vectors.\n\n\nTask 3 - Querying an API and a Tidy-Style Function\nUse GET() from the httr package to return information about a topic\n\n#install.packages(\"lubridate\")\nlibrary(httr)\nlibrary(jsonlite)\n\nWarning: package 'jsonlite' was built under R version 4.4.1\n\nlibrary(tibble)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(purrr)\n\n\nAttaching package: 'purrr'\n\n\nThe following object is masked from 'package:jsonlite':\n\n    flatten\n\n\n\n# API Key and Base URL\napi_key &lt;- \"f2ea85241c29455584a2681f775546e2\"\nbase_url &lt;- \"https://newsapi.org/v2/everything\"\n\n\n# Function to process the API response\nprocess_api_response &lt;- function(api_response) {\n  # Check if the response was successful\n  if (api_response$status_code != 200) {\n    stop(\"Error: API request failed with status code \", api_response$status_code)\n  }\n  \n  # Convert raw content to character string\n  content_string &lt;- rawToChar(api_response$content)\n  \n  # Parse JSON data\n  parsed_data &lt;- fromJSON(content_string)\n  \n  # Extract the 'articles' element from the parsed data\n  articles &lt;- parsed_data$articles\n  \n  # Convert the articles data to a tibble\n  tibble_data &lt;- as_tibble(articles)\n  \n  return(tibble_data)\n}\n\n\n# Main function to query news articles\nnews_articles &lt;- function(\n    q = \"tesla\",  \n    from = \"2024-10-15\",  \n    sortBy = \"publishedAt\",  \n    apiKey = api_key \n) {\n  # Create a list of query parameters\n  query_params &lt;- list(\n    q = q,\n    from = from,\n    sortBy = sortBy,\n    apiKey = apiKey\n  )\n  \n  \n # https://newsapi.org/v2/everything?q=gamestop&from=2024-10-01&language=en&pageSize=100&apiKey=\n  #https://newsapi.org/v2/everything?q=Tesla&from=2024-10-01&sortBy=publishedAt&apiKey=f2ea85241c29455584a2681f775546e2\"\n  # Construct the full URL with query parameters\n  full_url &lt;- modify_url(base_url, query = query_params)\n  \n  print(full_url) \n  \n  # call API using httr::GET\n  api_response &lt;- GET(full_url)\n  \n  # Check if the request was successful\n  if (http_error(api_response)) {\n    stop(\"API request failed: \", status_code(api_response))\n  }\n  \n  # Process the response into a tibble\n  data &lt;- process_api_response(api_response)\n  \n  return(data)\n}\n\n\n# Function to query the API with user inputs\nquery_news &lt;- function(subject, start_date, api_key) {\n  # Validate the input data \n  if (missing(subject) || !is.character(subject) || nchar(subject) == 0) {\n    stop(\"Subject must be a non-empty string.\")\n  }\n  if (missing(start_date) || !is.character(start_date) || nchar(start_date) == 0) {\n    stop(\"Start date must be a non-empty string.\")\n  }\n  if (missing(api_key) || !is.character(api_key) || nchar(api_key) == 0) {\n    stop(\"API key must be a non-empty string.\")\n  }\n  \n  # Call the news_articles function with user inputs\n  articles_df &lt;- news_articles(q = subject, from = start_date, apiKey = api_key)\n  \n  return(articles_df)\n}\n\n** Use the query_news function twice to grab data **\n\n# First fucntion to grab data for tesla articles\ntesla_articles &lt;- query_news(\n  subject = \"Tesla\",\n  start_date = \"2024-10-01\",  # Start from October 1, 2024\n  api_key = api_key\n)\n\n[1] \"https://newsapi.org/v2/everything?q=Tesla&from=2024-10-01&sortBy=publishedAt&apiKey=f2ea85241c29455584a2681f775546e2\"\n\n\n\n# Second function to grab the data for spacex articles \nspacex_articles &lt;- query_news(\n  subject = \"SpaceX\",\n  start_date = \"2024-10-01\",  # Start from October 1, 2024\n  api_key = api_key\n)\n\n[1] \"https://newsapi.org/v2/everything?q=SpaceX&from=2024-10-01&sortBy=publishedAt&apiKey=f2ea85241c29455584a2681f775546e2\"\n\n\n\n# View the results\nprint(\"Tesla Articles:\")\n\n[1] \"Tesla Articles:\"\n\nprint(tesla_articles)\n\n# A tibble: 100 × 8\n   source$id $name author title description url   urlToImage publishedAt content\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 lenta     Lenta Марин… \"Ило… \"Режиссер … http… https://i… 2024-10-16… \"«, » …\n 2 &lt;NA&gt;      Unwi… 藍骨   \"Vol… \"西九文化…  http… https://c… 2024-10-16… \"Volvo…\n 3 &lt;NA&gt;      Www.… Marie… \"Elo… \"Amerikas … http… https://i… 2024-10-16… \"Bei e…\n 4 &lt;NA&gt;      Stor… 小七…  \"Mod… \"經濟部能…  http… https://i… 2024-10-16… \"(10/1…\n 5 &lt;NA&gt;      Bizt… inves… \"Tes… \"InvestorP… http… https://b… 2024-10-16… \"Inves…\n 6 &lt;NA&gt;      Bizt… youtu… \"Tes… \"Tesla Inc… http… https://b… 2024-10-16… \"Tesla…\n 7 nbc-news  NBC … David… \"Elo… \"Elon Musk… http… https://m… 2024-10-16… \"Elon …\n 8 &lt;NA&gt;      Ilgi… redaz… \"Nei… \"La Procur… http… https://i… 2024-10-16… \"Andre…\n 9 business… Busi… ktang… \"Mar… \"Marc Andr… http… https://i… 2024-10-16… \"New f…\n10 business… Busi… bmetz… \"Elo… \"A new FEC… http… https://i… 2024-10-16… \"Elon …\n# ℹ 90 more rows\n\n#View(tesla_articles)\n\n\nprint(\"SpaceX Articles:\")\n\n[1] \"SpaceX Articles:\"\n\nprint(spacex_articles)\n\n# A tibble: 100 × 8\n   source$id $name author title description url   urlToImage publishedAt content\n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;chr&gt;       &lt;chr&gt;  \n 1 fox-news  Fox … Greg … \"GRE… \"'Gutfeld!… http… https://c… 2024-10-16… \"So la…\n 2 nbc-news  NBC … David… \"Elo… \"Elon Musk… http… https://m… 2024-10-16… \"Elon …\n 3 &lt;NA&gt;      BBC … https… \"Bay… \"NASA đã p… http… https://i… 2024-10-16… \"Ngun …\n 4 le-monde  Le M… Julie… \"New… \"A la croi… http… https://i… 2024-10-16… \"Histo…\n 5 &lt;NA&gt;      Ilgi… redaz… \"Nei… \"La Procur… http… https://i… 2024-10-16… \"Andre…\n 6 &lt;NA&gt;      Elco… Avi L… \"La … \"El telesc… http… https://i… 2024-10-16… \"A par…\n 7 business… Busi… bmetz… \"Elo… \"A new FEC… http… https://i… 2024-10-16… \"Elon …\n 8 &lt;NA&gt;      Subs… Nabee… \"Ref… \"A retrosp… http… https://s… 2024-10-16… \"Palan…\n 9 &lt;NA&gt;      Twea… Antho… \"Mic… \"Microsoft… http… https://s… 2024-10-16… \"Micro…\n10 &lt;NA&gt;      Cryp… Assad… \"Tes… \"Tesla, th… http… https://c… 2024-10-16… \"Tesla…\n# ℹ 90 more rows\n\n#View(spacex_articles)\n\n4.With one of your objects, summarize the name of the source for each article. That is, find a one-way contingency table for this information.\n\n# One- way contingency table for Tesla Articles\nsource_summary &lt;- tesla_articles$source |&gt;\n  mutate(name = as.character(name)) |&gt;  \n  group_by(name) |&gt;                     \n  summarise(count = n()) |&gt;              \n  arrange(desc(count))                   \n\n# Print the contingency table\nprint(source_summary)\n\n# A tibble: 65 × 2\n   name                count\n   &lt;chr&gt;               &lt;int&gt;\n 1 Slashdot.org            6\n 2 Electrek                5\n 3 Xataka.com.mx           5\n 4 Yahoo Entertainment     5\n 5 Feber.se                4\n 6 Aftonbladet.se          3\n 7 Gizmodo.com             3\n 8 TweakTown               3\n 9 Berliner Morgenpost     2\n10 Biztoc.com              2\n# ℹ 55 more rows\n\n\n\ntable(tesla_articles$source$name, useNA = \"always\")\n\n\n                [Removed]            Aftonbladet.se                   ANSA.it \n                        1                         3                         1 \n                  Autocar                  BBC News       Berliner Morgenpost \n                        1                         1                         2 \n               Biztoc.com             Boston Herald            Breitbart News \n                        2                         1                         1 \n         Business Insider            Caradisiac.com             CleanTechnica \n                        2                         1                         1 \n                 CoinDesk       Commercial Observer               CryptoSlate \n                        1                         1                         1 \n             Daily Signal                   Decrypt                    Dezeen \n                        1                         1                         1 \n                 DIE WELT             Diepresse.com              Droidnews.ru \n                        2                         1                         1 \n                 Electrek             Elespanol.com                  Feber.se \n                        5                         1                         4 \n                   Forbes                   Fortune               Gizmodo.com \n                        2                         1                         3 \n            GlobeNewswire                  HuffPost                       IGN \n                        1                         2                         1 \n            Ilgiornale.it                 InfoMoney             Investing.com \n                        1                         1                         2 \nInvestor's Business Daily              Jungewelt.de                 La Nacion \n                        1                         1                         1 \n                    Lenta                  NBC News                 New Atlas \n                        1                         1                         1 \n        New York Magazine           Next Big Future       Olhardigital.com.br \n                        1                         1                         1 \n          Overclockers.ru              Quartz India                        RT \n                        2                         1                         1 \n                  Sapo.pt       Securityaffairs.com              Slashdot.org \n                        1                         1                         6 \n                 Storm.mg         Svenska Dagbladet                TechCrunch \n                        2                         1                         1 \n                 TechSpot              Telepolis.de              The Diplomat \n                        1                         1                         1 \n        The Week Magazine              Thebridge.jp      Thegatewaypundit.com \n                        1                         1                         1 \n              Tistory.com              Tuxboard.com                 TweakTown \n                        1                         1                         3 \n                Unwire.hk                       Vox                Www.nzz.ch \n                        1                         1                         1 \n            Xataka.com.mx       Yahoo Entertainment                      &lt;NA&gt; \n                        5                         5                         0 \n\n\n** 5. For each of your returned data objects, turn the publishedAt column into a date column using the lubridate package (see the PARSE DATE-TIMES section of the\ncheat sheet!). Then sort the two data frames, each by their new parsed date published column. Finally, create a new variable called pub_diff that is the difference #in time between the articles’ published dates (use lag() with mutate()). Save the modifications as new data frames.\nAssuming you have two data frames, tesla_articles and another one named second_articles\nFor example, let’s say the second data frame is stored as ‘second_articles’ **\n\n# Process the first data frame: tesla_articles\ntesla_articles_processed &lt;- tesla_articles |&gt;\n  # Convert the publishedAt column to a date column\n  mutate(publishedAt = ymd_hms(publishedAt)) |&gt;\n  # Sort data by the new published date column\n  arrange(publishedAt) |&gt;\n  # Create the pub_diff variable\n  mutate(pub_diff = publishedAt - lag(publishedAt))\n\n\n# Process the second data frame: spacex_articles\nspacex_articles_processed &lt;- spacex_articles |&gt;\n  # Convert the publishedAt column to a date column\n  mutate(publishedAt = ymd_hms(publishedAt)) |&gt;\n  # Sort data by the new published date column\n  arrange(publishedAt) |&gt;\n  # Create the pub_diff variable\n  mutate(pub_diff = publishedAt - lag(publishedAt))\n\n\n# View the modified data frames\nprint(\"Processed Tesla Articles:\")\n\n[1] \"Processed Tesla Articles:\"\n\nprint(tesla_articles_processed)\n\n# A tibble: 100 × 9\n   source$id $name author title description url   urlToImage publishedAt        \n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;dttm&gt;             \n 1 &lt;NA&gt;      Tuxb… B. L.  Les … \"C’est la … http… https://w… 2024-10-15 17:04:20\n 2 &lt;NA&gt;      Quar… Owen … Amer… \"In recent… http… https://i… 2024-10-15 17:04:47\n 3 ansa      ANSA… &lt;NA&gt;   Andr… \"30 anni, … http… https://w… 2024-10-15 17:05:30\n 4 &lt;NA&gt;      Berl… FUNKE… Tesl… \"Bereits z… http… https://i… 2024-10-15 17:08:21\n 5 &lt;NA&gt;      Diep… Die P… Tesl… \"Das Land … http… https://i… 2024-10-15 17:09:55\n 6 &lt;NA&gt;      DIE … WELT   Jetz… \"In einem … http… https://i… 2024-10-15 17:23:33\n 7 &lt;NA&gt;      Febe… Bobby… Rege… \"\\\"För ett… http… https://s… 2024-10-15 17:30:00\n 8 ign       IGN   Ketly… Está… \"Muitas pe… http… https://s… 2024-10-15 17:31:28\n 9 &lt;NA&gt;      Huff… Marco… 'I, … \"Alex Proy… http… https://i… 2024-10-15 17:36:48\n10 &lt;NA&gt;      Comm… Bpasc… Bank… \"Lincoln P… http… https://c… 2024-10-15 17:42:50\n# ℹ 90 more rows\n# ℹ 2 more variables: content &lt;chr&gt;, pub_diff &lt;drtn&gt;\n\n#View(tesla_articles_processed)\n\n\nprint(\"Processed Spacex Articles:\")\n\n[1] \"Processed Spacex Articles:\"\n\nprint(spacex_articles_processed)\n\n# A tibble: 100 × 9\n   source$id $name author title description url   urlToImage publishedAt        \n   &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;dttm&gt;             \n 1 &lt;NA&gt;      Tvn2… ps     \"Wyj… \"Przez kil… http… https://t… 2024-10-15 13:18:21\n 2 &lt;NA&gt;      Over… Fanto… \"Аэр… \"Модульная… http… https://o… 2024-10-15 13:19:33\n 3 &lt;NA&gt;      Inte… Inter… \"Una… \"Il 14 ott… http… https://m… 2024-10-15 13:25:11\n 4 &lt;NA&gt;      Lega… Umber… \"La … \"La missio… http… https://l… 2024-10-15 13:30:20\n 5 &lt;NA&gt;      Olha… Aless… \"Lix… \"Projeções… http… https://o… 2024-10-15 13:36:01\n 6 &lt;NA&gt;      Zive… Jiří … \"Rus… \"\"          http… https://w… 2024-10-15 13:45:00\n 7 &lt;NA&gt;      Libe… Carla… \"¿Po… \"La NASA l… http… https://s… 2024-10-15 13:50:26\n 8 &lt;NA&gt;      The … David… \"The… \"A frozen … http… https://m… 2024-10-15 13:57:50\n 9 &lt;NA&gt;      Spac… Saman… \"Spa… \"In the wa… http… https://c… 2024-10-15 14:00:50\n10 &lt;NA&gt;      Raw … Matth… \"Gli… \"Tech bill… http… https://w… 2024-10-15 14:05:02\n# ℹ 90 more rows\n# ℹ 2 more variables: content &lt;chr&gt;, pub_diff &lt;drtn&gt;\n\n\n6.With each of your resulting two data objects (each a data frame, which is a special case of a list) do the following actions: • Choose one of your data frames. Subset the data frame to only return the date version of publishedAt and the pub_diff variables. Then use one call to the map() function to return the mean, standard deviation, and median of these columns. You should use a custom anonymous function using ‘shorthand’ notation ((x) …). Note that the pub_diff variable includes an NA so you’ll need to set na.rm = TRUE in the calls to mean(0, sd(), and median().\n\n# Subset the tesla_articles_processed data frame\ntesla_subset &lt;- tesla_articles_processed |&gt;\n  select(publishedAt, pub_diff)\n\n\n# Use map() to calculate the mean, standard deviation, and median for each column\nstatistics_results &lt;- map(tesla_subset, ~ c(\n  mean = mean(.x, na.rm = TRUE),\n  sd = sd(.x, na.rm = TRUE),\n  median = median(.x, na.rm = TRUE)\n))\n\n\n# Convert the results to data frame\nstatistics_df &lt;- as.data.frame(do.call(rbind, statistics_results))\nstatistics_df &lt;- tibble::rownames_to_column(statistics_df, var = \"Statistic\")\n\n\n# View the results\nprint(\"Statistics for tesla_articles_processed:\")\n\n[1] \"Statistics for tesla_articles_processed:\"\n\nprint(statistics_df)\n\n    Statistic         mean         sd     median\n1 publishedAt 1.729027e+09 11616.9161 1729025169\n2    pub_diff 3.823333e+02   458.3764        271"
  }
]